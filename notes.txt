https://github.com/avamsykiran/Angular_Mar08Mar19_14001700.git

Advanced Angular 2 to 8 .... 11
--------------------------------

    Pre requisites
    -------------------

    Javascript ES6
    Angular 2
        
    Lab Setup
    ----------------------
    Node                            https://nodejs.org/en/
                node --version

                server side javascript exectuion environment.

    npm
                npm --version

                node package manager,
                package in javascript is equivalent to the 'dependency' or 'library'

    angular-cli

                angular command line interface

                automates a bunch deve related tasks.
                
                node package.

                npm install -g @angualr/cli

                ng --version

    VS Code             https://code.visualstudio.com/download

    Angular
    -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                                
                                Javascript SPA Framework

        AngularJS       1

                                typescript = javascript +  typeChcecking
        Angular         2
        Angular         4
        Angular         5
        Angular         6
        Angular         7
        
        
        Angular         8       we target this...


        compiling typescript code into javascript is called transpelling...

        Node is needed here to execute a variaty
        of development tools like babel-typescript compiler or work
        flow automation and a dev server.


        Single Page Application
        ----------------------------------------------------------------

                only one html page in the entire application.

                    this html page is composed of smart sections called Components.


        Angular 8
        -----------------------------------------------------------------

             angular adds extandabilioty to html,
                    we can create our own elements (tags) and attributes.   

            Archetecture (angular building blocks)

                Module

                            is a class, that is decorated with @NgModule() decorator.

                            the angular module is used to group Components,Directives,Pipes
                            services,Guards and othet angular building block.

                            @NgModule({
                                declarations:[
                                   //list of Components, Directives and Pipes         
                                ],
                                imports:[
                                   //list of sub-modules         
                                ],
                                providers:[
                                    //list of services
                                ],
                                bootstrap:[
                                    //list of Components to be 
                                    //instantiated immdeatly after instatiating the module
                                ]
                            })
                            export class MyModule{
                            }

                            One single main module, inside which the 
                            entire application resides, and 
                            such main module is called ROOT modules 

                            inside the ROOT modules, we can include (import)
                            any number of sub-modules, and thes sub-modules are 
                            called FEATURE modules.

                            ecommerce                   ROOT Module
                                | - orders              FEATURE Module    
                                | - sales               FEATURE Module    
                                | - inventory           FEATURE Module

                Component
                            is a class, that is decorated with @Component() decorator.
                            each component represent one user-defiend html element (tag).

                            Component = Template + Controller

                                Template is going supply the html content that has to render
                                Controller will suplly the script code that executes
                                in reposne tot he events that happen on the template.


                            @Component({
                                selector:'login',
                                templateUrl:'login-form.html'
                            })
                            export class LoginFormComponent {

                                login(){
                                    ...........
                                }
                            }    

                            login-form.html
                            -------------------------
                                <form>
                                    <input type="text" .... />
                                    <input type="password" .... />
                                    <button (click)="login()">Log in </button>
                                </forn>


                            index.html
                            <html>
                                <body>
                                    <login></login>
                                </body>
                            </html>


                            renderd index.html
                            -------------------------------
                            <html>
                                <body>
                                <form>
                                    <input type="text" .... />
                                    <input type="password" .... />
                                    <button onClick="login()">Log in </button>
                                </forn>
                                    
                                </body>
                            </html>

                Directive
                           is a class, that is decorated with @Directive() decorator.
                            each directive represent one user-defiend html attribte.

                            @Directive({
                                selector:'smart-colored',                                
                            })
                            export class SmartColorDirective {
                                .........
                            }                            

                            <p smart-colored></p>
                            <div smart-colored></div>

                            <td smart-colored></td>

                            in-built directive
                            ----------------------------
                                    Structural Directive
                                        *ngIf
                                        *ngFor
                                        ngSwitch

                                    Attribute Directives

                                        routerLink
                                        ngForm
                                        ngModel
                                        formGroup
                                        formControlName .....etc

                                    Event Directives

                                        click
                                        dblClick
                                        mouseOver
                                        mouseDown
                                        blur
                                        focus
                                        change
                                        ngSubmit
                                            ..etc
                Pipe
                           is a class, that is decorated with @Pipe() decorator.
                            used to tranform a piece of data into a different format ..!

                        
                            in-built pipes
                            ---------------------

                                lowercase
                                uppercase
                                number
                                percentage
                                currency
                                date
                                json
                                async
                                                {{"Vamsy"|lowercase}}

                                @Pipe({
                                   name:"inwords"         
                                })
                                export class InWordsPipe{
                                    transform(value:number):string {
                                        .......................
                                    }
                                }
                                                {{billAmount|inwords}}

                Service
                         are classes that hold bussiness logic,and are marked
                         by @Injectable() decorator   

                         @Injectable({
                            provided:'root'    
                         })   
                         export class AuthenticationService{

                             login(){

                             }

                             logout(){
                                 
                             }

                             regitration(){

                             }
                         }

            Typescript
            ---------------------------------------------

                data types

                        any
                        string
                        number
                        boolean
                        void


                class Fields (data members) and local variables and function params

                    class Employee{
                        empId:number; //data members
                        ename:string; //data members
                        basic:number; //data members

                        constructor(){
                            //one class can have only one constructor
                        }

                        computeHra(percentage:number) : number {
                            let hra : number; //local variables

                            hra = this.basic*percentage;

                            return hra;    
                        }
                    }

    Angular CLI
    ----------------------------------------------------------

        ng new Proj-name

        inside the project:

            ng generate <BuildingBlock> <blockName>

            ng g component componentName
            ng g service serviceName

            .................etc

            npm start  (or) ng serve --port 5656 -o         
                                            compile
                                            build
                                            start angualr dev server
                                            launch the app on browser

            ng build
                                            compile
                                            build
                                            minify

    Angular Bindings                                            
    -----------------------------

    interpolation
            {{ }}

    one-way data binding
            [ ]

    two way data binding
            [(  )]

    event binding
            (   )

    style/(class) binding
            [class]="{className:booleanFlag,classNAme2:booleanFlag2}"
                    

    Feature Modules
------------------------------------------------------------------------------

    Domain Modules
            one spoecific function Domain.

            only root component to be exported.
            all other components are tailored to the root component only.

    Routing Modules

            is used to isolating Routing configuaration.


    Service Modules

            is used to hold only services

    Widget Modules  / Shared Modules

            is used to hold reusable components, pipes, directives.


   Dependency Injection
   ------------------------------------------

    Injectables     (Services)
      
    
    Injector        supply objects of the services

        creats a rootInjector at the tiem bootstraping the angular project.

        rootInjector
            oneInjectorPerFeatureModule
                oneInjectorPerConsumer

    Provider        create objects of the services

        //a single obj of this service is created by the rootProvider
        //a single obj of this service is supplied by the rootInjector
        @Injectable({
            providedIn:'root'
        })          
        export class Service1{  
            data:string;....
        }
        --------------------------------------------
        //a single obj of this service is created by the rootProvider
            for eagarly loaded modules
            and each lazy loaded moduels get a new object of the service in 
            thgat module specific provider
        //a single obj of this service is supplied by the rootInjector
            for eagarly loaded modules
            and each lazy loaded moduels  a new object of the service in 
            supplied in the module specific provider            
        @Injectable({
            providedIn:'any'
        })          
        export class Service2{  
            data:string;....
        }
        --------------------------------------------
        //a single obj of this service is created by the workspaceProvider
        //and supplied by workspaceinjector
        // a single workspace can be a combiantion of a few projects.            
        @Injectable({
            providedIn:'platform'
        })          
        export class Servicee3{  
            data:string;....
        }
        ------------------------------------------------------
        @Injectable()          
        export class Service4{  
            data:string;....
        }

        @NgModule({
            .....,
            providers:[Service4]
        }) //a moduel spceific object of the service is managed
        export class MyFeatureModule{
            
        }

        @Component({
            .....,
            providers:[Service4]
        }) //a component spceific object of the service is managed
        export class MyComponent{
            
        }

    consuemrs (Component, Pipe, Directive)     

    Interceptors
    --------------------------

        pA----(...access to his conversion - interceptor....)---pB

        interceptor 
            1. can intercept the conversation and
                to some modifications before the conversation
                is received or send.
                        
        angular (HttpClient) -------(HttpInterceptor)------------- REST API                        

    SASS
    -----------------------------------

        SASS is called CSS pre-processor.

        give programatic flavour to CSS.

        SASS reduces repitativeness in css.

        .css        CSS is directly understood by all browsers
        .scss       SASS is to be transpelled into css before
                    given to a browser.

        Variables
        ==========
            $var: value;

                    string
                    number
                    boolean
                    null
                    list
            
        Nested Rules
        ----------------------

        CSS

        div p{
            .........
        }            

        div p span{
            ............
        }
        
        SCSS

        div{
            p{
                span{
                    
                }
            }
        }


    Angular Features Version Wise
    -------------------------------------

    Angular 2
        Released in 2016
        Complete rewrite of Angular 1
        Written entirely in typescript
        Component-based instead of Controller
        ES6 and typescript supported
        More testable as component-based
        Support for Mobile/Low-end devices
        Up to typescript 1.8 is supported

    Angular 3:
        Why we don’t have Angular 3?
        — Angular is being developed in a MonoRepo it means a single repo for everything. @angular/core, @angular/compiler, @angular/router etc are in the same repo and may have their own versions.
        — The angular router was already in v3 and releasing angular 3 with router 4 will create confusion
        — To avoid this confusion they decided to skip the version 3 and release with version 4.0.0 so that every major dependency in the MonoRepo are on the right track.

    Angular 4
        Released in 2017
        Changes in core library
        Angular 4 is simply the next version of angular 2, 
        the underlying concept is the same & is an inheritance from Angular 2
        Lot of performance improvement is made to reduce size of compiler generated code
        Typescript 2.1 & 2.2 compatible 
            — all feature of ts 2.1 & 2.2 are supported in Angular 4 application
        Animation features are separated from @angular/core to @angular/animation
            — don’t import @animation packages into the application to reduce bundle size 
            and it gives the performance improvement.       
        Else block in *ngIf introduced:
            — Instead of writing 2 ngIf for else , 
            simply add below code in component template:
                *ngIf=”yourCondition; else myFalsyTemplate”
                <ng-template #myFalsyTemplate>Else Html</ng-template>

    Angular 5
        Released 1st November 2017
        Build optimizer: It helps to remove unnecessary code from application
        Angular Universal State Transfer API and DOM Support 
            — By using this feature, we can now share the state of the application 
                between the server side and client side very easily.
        Compiler Improvements: 
            This is one of the very nice features of Angular 5, 
            which improved the support of incremental compilation of an application.
        Preserve White space: 
            To remove unnecessary new lines, tabs and white spaces we can 
            add below code(decrease bundle size)
                // in component decorator you can now add:
                    “preserveWhitespaces: false”
                // or in tsconfig.json:
                    “angularCompilerOptions”: { “preserveWhitespaces”: false}`

        Increased the standardization across all browsers: 
            For internationalization we were depending on `i18n` , 
            but in ng 5 provides a new date, number, and currency pipes 
            which increases the internationalization across all the browsers 
            and eliminates the need of i18n polyfills.
        
        exportAs: In Angular 5, multiple names support for both directives and components
        HttpClient: 
            until Angualar 4.3 @angular/HTTP was been used which is now 
            depreciated and in Angular 5 a new module called HttpClientModule is 
            introduced which comes under @angular/common/http package.
        
        Few new Router Life-cycle Events being added in Angular 5: 
            In Angular 5 few new life cycle events being added to the router and those are:
                ActivationStart, ActivationEnd, ChildActivationStart, ChildActivationEnd, 
                GuardsCheckStart, GuardsCheckEnd, ResolveStart and ResolveEnd.

        Angular 5 supports TypeScript 2.3 version.
            Improved in faster Compiler support:
            A huge improvement made in an Angular compiler to make the development 
            build faster. We can now take advantage of by running the below command 
            in our development terminal window to make the build faster.

            ng serve/s — aot
    
    Angular 6
            Released on April 2018
            This release is focused less on the underlying framework, 
            and more on tool-chain and on making it easier to move quickly with angular 
            in the future

            No major breaking changes
            
            Dependency on RxJS 6 (this upgrade have breaking changes but CLI 
            command helps in migrating from older version of RxJS)

            Synchronizes major version number of the:
                — Angular framework
                — Angular CLI
                — Angular Material + CDK

                All of the above are now version 6.0.0, 
                
            Remove support for <template> tag and “<ng-template>” should be used.

            Registering provider: To register new service/provider, 
            we import Service into module and then inject in provider array. e.g:
            
            // app.module.ts
                import {MyService} from './my-service';
                    ...
                    providers: [...MyService]
                    ... 

            But after this upgrade you will be able to add providedIn property 
            in injectable decorator. e.g:
            
            // MyService.ts
            @Injectable({ providedIn: 'root'})
            export class MyService{}
                
            CLI Changes: Two new commands have been introduced
            
            — ng update <package>
            * Analyse package.json and recommend updates to your application
            * 3rd parties can provide update scripts using schematics
            * automatically update code for breaking changes
            * staying update and low maintenance
        
            — ng add
            * add new capablities to your applicaiton
            * e.g ng add @angular/material : 

    Angular 7:
            Released on October 2018
            This is a major release and expanding to the entire platform including-
            — Core framework,
            — Angular Material,
            — CLI
            
            CLI Prompts: 
            The CLI will now prompt users as when running common commands 
            like ng new or ng add @angular/material with the intend o
            f getting aid for building a new project using SCSS.

            Added a new interface — UrlSegment[] to CanLoad interface
            Added a new interface — DoBootstrap interface

            Angular 7 added a new compiler — Compatibility Compiler (ngcc)
            Introduce a new Pipe called — KeyValuePipe
            Angular 7 now supporting to TypeScript 2.9.
            Added a new elements features — enable Shadow DOM v1 and slots
            Added a new router features — warn if navigation triggered outside Angular zone
            Added a new mapping for ngfactory and ngsummary files to their module names in AOT summary resolver.
            Added a new “original” placeholder value on extracted XMB
            Added a new ability to recover from malformed URLs
            Added a new compiler support dot (.) in import statements and also avoid a crash 
            in ngc-wrapped
            Update compiler to flatten nested template fns

    Angular 8:
        Released April 2019
        Being smaller, faster and easier to use and it will be making Angular developers life easier.
        Added Support for TypeScript 3.2
        Added a Navigation Type Available during Navigation in the Router
        Added pathParamsOrQueryParamsChange mode for runGuardsAndResolvers in the Router
        Allow passing state to routerLink Directives in the Router
        Allow passing state to NavigationExtras in the Router
        Restore the whole object when navigating back to a page managed by Angular Router
        Added support for SASS
        Resolve generated Sass/Less files to .css inputs
        Added Predicate function mode for runGuardsAndResolvers:-
            This option means guards and resolvers will ignore changes when a provided predicate function returns `false`. This supports use cases where an application needs to ignore some param updates but not others. For example, changing a sort param in the URL might need to be ignored, whereas changing the `project` param might require a re-run of guards and resolvers.
        Added functionality to mark a control and its descendant controls as touched: — add markAllAsTouched () to AbstractControl

Token Based authentication
----------------------------------------

1. request for an access
    Audence request for an access to th Theater
    the theter demands some money

    UI request for an access to a BackEndServer
    the BackEndServer demands som identity (pubKey+privKey)

2. Once the demand is met, we need a proof of authentication...

        The theter issue a ticket to the Audence

        the BackEndServer issues a token (JWT) to the UI

3. UI has to preserve the token for furthur access jsut like
    the Audence has to preserve the ticket.

4. Audence should submit the ticket, each time a proof of authentication 
is demandded to access any part of the theater

    UI should send the Token along with any other request
    to be fulfilled or responded by the BackEndServer

Json Server Auth
-------------------------------

      /register
      /signup

      /login  
      /signin

    Owner    
    LoggedIn
    Anonymous/public

    the object whose userId property matches
    with the id of a user is said to be owned by that user.

    Unix Security kind of thing to provide access control

    No Access                 =  0
    Read Permission           =  2
    Write Permission          =  4
    Read and Write Permission =  6    


    accessCode = OUP        000 to 666

        620         owner is allowed with read and Write
                    LoggedIn user allowed only to read
                    Public users have no permission at all.

Jasmine is a javascript testing library
============================================================
    describe        create a test suite.
    it              create a test case.
    before          setup method
    after           teardown method

    describe("test naem ad description",()=>{
        //all test cases will go
        //this is the suite

        before(()=>{
            //this execute before 
            //executing each test case
        });

        after(()=>{
            //this execute after
            //executing each test case
        });

        it("test case name or description",()=>{
            //your test case
        });

        describe("a sub test suite",()=>{
            //more test cases.
        });
    });

        Jasmine matcher
        -------------------------------

            expect(testexpression) //create a matcher

                toBe
                toEqual
                tobeTruthy
                toBeFalse
                toBeNull
                toBeUndefiend
                ...etc
            
            expect(2*2).toBe(4);
